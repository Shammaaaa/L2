package listing

import (
	"fmt"
	"math/rand"
	"time"
)

func asChan(vs ...int) <-chan int {
	c := make(chan int)

	go func() {
		for _, v := range vs {
			c <- v
			time.Sleep(time.Duration(rand.Intn(1000)) * time.Millisecond)
		}

		close(c)
	}()
	return c
}

func merge(a, b <-chan int) <-chan int {
	c := make(chan int)
	go func() {
		for {
			select {
			case v := <-a:
				c <- v
			case v := <-b:
				c <- v
			}
		}
	}()
	return c
}

func main() {

	a := asChan(1, 3, 5, 7)
	b := asChan(2, 4, 6, 8)
	c := merge(a, b)
	for v := range c {
		fmt.Println(v)
	}
}

// от 1 до 8 в случайном порядке, потом нули
/*
В функции asChan, задается аргумент переменной длины vs ...int, который принимает произвольное количество целочисленных значений.
2. Создается канал c типа chan int.
3. Запускается анонимная горутина, которая в цикле отправляет значения v из vs в канал c.
После отправки каждого значения выполняется задержка в случайном интервале от 0 до 1000 миллисекунд.
4. После отправки всех значений из vs, канал c закрывается с помощью функции close(c).
5. Функция asChan возвращает канал c в качестве значения.
6. В функции merge объединяются два канала a и b в один канал c.
7. Запускается анонимная горутина, которая в бесконечном цикле использует оператор select для выбора
готового значения из канала a или b и отправки его в канал c.
8. Функция merge возвращает канал c в качестве значения.
9. В функции main создаются каналы a и b с помощью функции asChan, передавая целочисленные значения в каждый из них.
10. Создается канал c, который является объединением каналов a и b с помощью функции merge.
11. В цикле for происходит итерация по значениям в канале c и каждое значение печатается с помощью функции fmt.Println.
12. Цикл заканчивается, когда канал c закрывается, что происходит после того,
как все значения из каналов a и b были получены и отправлены в c.
*/
