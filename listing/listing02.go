package listing

import (
	"fmt"
)

func test() (x int) {
	defer func() {
		x++
	}()
	x = 1
	return
}

func anotherTest() int {
	var x int
	defer func() {
		x++
	}()
	x = 1
	return x
}

func main() {
	fmt.Println(test())        // 2
	fmt.Println(anotherTest()) // 1
}

/*
При вызове функции test(), переменной x присваивается значение 1.
Выполняется defer функция, которая инкрементирует значение переменной x.
Функция test() возвращает значение x, которое на этот момент равно 2 из-за выполненного defer.

При вызове функции anotherTest(), переменной x присваивается значение 1.
Выполняется defer функция, которая инкрементирует значение переменной x.
Функция anotherTest() возвращает значение x, которое равно 1,
так как defer функция выполнится после возвращения значения.

Ключевое слово defer в Go используется для отложенного выполнения функции до завершения зоны видимости,
в которой оно было объявлено.
При использовании defer функция помещается в стек отложенных вызовов, и она будет вызвана после завершения текущей функции
или блока кода.
Порядок вызовов defer функций определяется по принципу "последним пришел - первым обработан".
Если в функции объявлено несколько defer функций, они будут вызваны в обратном порядке их объявления.
*/
