package listing

import (
	"fmt"
	"os"
)

func Foo() error {
	var err *os.PathError = nil
	return err
}

func main() {
	err := Foo()
	fmt.Println(err)        // nil
	fmt.Println(err == nil) // false
}

/*
В функции Foo() переменной err присваивается значение nil типа *os.PathError (указатель на os.PathError).
Возвращаемое значение функции Foo() является nil.
В функции main() в переменную err присваивается возвращаемое значение функции Foo().
При выводе переменной err на экран получаем <nil>, что означает отсутствие ошибки.
При сравнении переменной err с nil (err == nil), результат будет false, так как хотя значение переменной err равно nil,
ее тип не является пустым интерфейсом (interface{}).

Интерфейсы в Go представляют набор методов, которые определяют поведение объектов.
Интерфейсы могут быть пустыми (не содержат методов) или непустыми (содержат один или несколько методов).
Пустой интерфейс (interface{}) может хранить значения любого типа, так как не имеет указанного набора методов.

В данной программе используется тип *os.PathError, который представляет ошибку операций файловой системы.
Возвращаемое значение функции Foo() имеет тип *os.PathError, поэтому при проверке на nil сравнивается значение и
тип переменной err.
Если бы возвращаемое значение имело тип error (интерфейс), сравнение с nil было бы истинным,
так как пустой интерфейс может хранить значения любого типа.
*/
