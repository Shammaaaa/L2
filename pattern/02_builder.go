package pattern

type Builder interface {
	MakeHeader(str string)
	MakeBody(str string)
	MakeFooter(str string)
}

type Director struct {
	builder Builder
}

func (d *Director) Construct() {
	d.builder.MakeHeader("Header")
	d.builder.MakeBody("Body")
	d.builder.MakeFooter("Footer")
}

type ConcreteBuilder struct {
	product *Product
}

func (b *ConcreteBuilder) MakeHeader(str string) {
	b.product.Content += "<header>" + str + "</header>"
}

func (b *ConcreteBuilder) MakeBody(str string) {
	b.product.Content += "<article>" + str + "</article>"
}

func (b *ConcreteBuilder) MakeFooter(str string) {
	b.product.Content += "<footer>" + str + "</footer>"
}

type Product struct {
	Content string
}

func (p *Product) Show() string {
	return p.Content
}

/*
Паттерн "Строитель" применяется, когда необходимо создать объект с определенной конфигурацией, но с различными вариациями или параметрами.
Он отделяет процесс создания объекта от его представления, позволяя избежать "раздувания" конструктора и делает код более читаемым и поддерживаемым.

Плюсы использования паттерна "Строитель" включают:

1. Упрощение создания объектов: Паттерн позволяет пошагово создавать объекты, управляя порядком и настройками шагов.
Это упрощает процесс конструирования и позволяет создавать сложные объекты с гибкими параметрами.
2. Гибкость и настраиваемость: Позоляет создавать объекты с различными вариантами конфигурации, учитывая изменения в параметрах и состоянии объекта.
3. Улучшение читаемости кода: Паттерн разделяет процесс создания объекта на отдельные шаги, делая код более структурированным и понятным.
4. Сокрытие сложности: Позволяет абстрагироваться от сложной логики и параметров объекта, обеспечивая более простой интерфейс для создания объектов.

Однако, есть и некоторые минусы:

1. Увеличение количества классов: Паттерн "Строитель" предполагает наличие отдельных классов для каждого шага конструирования.
Это может привести к увеличению количества классов в системе.
2. Сложность масштабирования: Если требуется добавить или изменить шаги конструирования, может потребоваться изменение нескольких классов одновременно.
Это может быть неудобным и сложным при масштабировании системы.

Необходимость использования паттерна "Строитель" следует оценивать в контексте конкретной задачи.
Он особенно полезен, когда необходимо создавать объекты с гибкими параметрами или вариациями, а также при работе со сложными структурами создаваемых объектов.
*/
