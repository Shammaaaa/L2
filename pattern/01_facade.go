package pattern

import (
	"strings"
)

func NewMan() *Man {
	return &Man{
		house: &House{},
		tree:  &Tree{},
		child: &Child{},
	}
}

type Man struct {
	house *House
	tree  *Tree
	child *Child
}

func (m *Man) Todo() string {
	result := []string{
		m.house.Build(),
		m.tree.Grow(),
		m.child.Born(),
	}
	return strings.Join(result, "\n")
}

type House struct {
}

func (h *House) Build() string {
	return "Build house"
}

type Tree struct {
}

func (t *Tree) Grow() string {
	return "Tree grow"
}

type Child struct {
}

// Born implementation.
func (c *Child) Born() string {
	return "Child born"
}

/*
Паттерн "Фасад" применяется, когда необходимо упростить интерфейс или скрыть сложность взаимодействия с подсистемой.
Он обеспечивает единую точку доступа для клиента, а также упрощает работу с подсистемой, предоставляя более высокоуровневый интерфейс.

Плюсы использования паттерна "Фасад":

1. Упрощение интерфейса: Фасад скрывает сложность подсистемы и предоставляет клиентам простой и понятный интерфейс.
2. Сокрытие деталей реализации: Фасад скрывает подробности внутренней реализации подсистемы, предоставляя только необходимый функционал.
3. Уменьшение зависимостей: Клиенты взаимодействуют только с фасадом, что позволяет изолировать изменения в подсистеме от клиентского кода.
4. Улучшение сопровождаемости: Изменения в подсистеме могут быть произведены в одном месте - в фасаде, что упрощает сопровождение и тестирование кода.

Однако, есть и некоторые минусы:

1. Ограниченная гибкость: Фасад может не предоставлять полный набор возможностей подсистемы, так как скрывает некоторые детали.
В таком случае, клиентам может потребоваться прямое взаимодействие с компонентами подсистемы.
2. Сложность расширения: Внесение изменений в функционал фасада или подсистемы может быть сложным, особенно если существует множество зависимостей между компонентами.
3. Дополнительный слой абстракции: Использование фасада может привести к добавлению дополнительного слоя абстракции, что может усложнить понимание и анализ системы.

Необходимость использования паттерна "Фасад" следует оценивать в контексте конкретной задачи. Он особенно полезен в случаях,
когда подсистема имеет сложную структуру или множество зависимостей, или когда требуется предоставить простой и единый интерфейс для клиентов.
*/
